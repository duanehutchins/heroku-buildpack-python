#!/usr/bin/env bash

set +e

# The location of the pre-compiled python binary.
VENDORED_PYTHON="${VENDOR_URL}/runtimes/$PYTHON_VERSION.tar.gz"

if [[ $PYTHON_VERSION =~ ^python-2 ]]; then
  if [[ "$PYTHON_VERSION" != "$LATEST_2" ]]; then
    puts-warn "The latest version of Python 2 is $LATEST_2 (you are using $PYTHON_VERSION, which is unsupported)."
    puts-warn "We recommend upgrading by specifying the latest version ($LATEST_2)."
    echo "       Learn More: https://devcenter.heroku.com/articles/python-runtimes"
  else
    echo "       Using supported version of Python 2 ($PYTHON_VERSION)"
  fi
else
  if [[ $PYTHON_VERSION =~ ^python-3 ]]; then
    if [[ $PYTHON_VERSION =~ ^python-3.7 ]]; then
      if [[ "$PYTHON_VERSION" != "$LATEST_37" ]]; then
      puts-warn "The latest version of Python 3.7 is $LATEST_37 (you are using $PYTHON_VERSION, which is unsupported)."
      puts-warn "We recommend upgrading by specifying the latest version ($LATEST_37)."
      echo "       Learn More: https://devcenter.heroku.com/articles/python-runtimes"
      else
        echo "       Using supported version of Python 3.7 ($PYTHON_VERSION)"
      fi
    else
      if [[ $PYTHON_VERSION =~ ^python-3.6 ]]; then
        if [[ "$PYTHON_VERSION" != "$LATEST_36" ]]; then
          puts-warn "The latest version of Python 3.6 is $LATEST_36 (you are using $PYTHON_VERSION, which is unsupported)."
          puts-warn "We recommend upgrading by specifying the latest version ($LATEST_36)."
          echo "       Learn More: https://devcenter.heroku.com/articles/python-runtimes"
        else
          echo "       Using supported version of Python 3.6 ($PYTHON_VERSION)"
        fi
      else
        puts-warn "Heroku supports runtime versions $LATEST_37, $LATEST_36 and $LATEST_2."
        puts-warn "You are using $PYTHON_VERSION, which is unsupported."
        puts-warn "We recommend upgrading by specifying the default supported version ($LATEST_36)."
        echo "       Learn More: https://devcenter.heroku.com/articles/python-runtimes"
      fi
    fi
  fi
fi

if [ ! "$SKIP_INSTALL" ]; then
  puts-step "Installing $PYTHON_VERSION"

  # Prepare destination directory.
  mkdir -p .heroku/python

  mcount "version.python.$PYTHON_VERSION"

  # Use system python, if the version matches
  echo "$SYSTEM_PYTHON" -- "$SYSTEM_PYTHON_VERSION" -- "$PYTHON_VERSION"
  if [[ -f "$SYSTEM_PYTHON" ]] && [[ "$SYSTEM_PYTHON_VERSION" == "$PYTHON_VERSION" ]]; then
    puts-step "Using system-installed $SYSTEM_PYTHON"
    mkdir -p "$BUILD_DIR/.heroku/python/bin" "$BUILD_DIR/.heroku/python/lib"
    ln -nsf "$SYSTEM_PYTHON" "$BUILD_DIR/.heroku/python/bin/python3"
    ln -nsf "$SYSTEM_PYTHON" "$BUILD_DIR/.heroku/python/bin/python"
    # ln -nsf "$BUILD_DIR/.heroku/python" "$HOME/.local"

  elif ! curl "${VENDORED_PYTHON}" -s | tar zxv -C .heroku/python &> /dev/null; then
    puts-warn "Requested runtime ($PYTHON_VERSION) is not available for this stack ($STACK)."
    puts-warn "Aborting.  More info: https://devcenter.heroku.com/articles/python-support"
    exit 1
  fi

  # Record for future reference.
  echo "$PYTHON_VERSION" > .heroku/python-version
  echo "$STACK" > .heroku/python-stack
  FRESH_PYTHON=true

  hash -r
fi

# On Heroku CI, builds happen in `/app`. Otherwise, on the Heroku platform,
# they occur in a temp directory. Beacuse Python is not portable, we must create
# symlinks to emulate that we are operating in `/app` during the build process.
# This is (hopefully obviously) because apps end up running from `/app` in production.
if [[ "$BUILD_DIR" != '/app' ]]; then
    mkdir -p /app
    ln -nsf "$BUILD_DIR/.heroku" /app/.heroku
    # ln -nsf "$BUILD_DIR/.heroku/python" /app/.heroku/python
    # ln -nsf "$BUILD_DIR/.heroku/vendor" /app/.heroku/vendor
fi

# If Pip isn't installed:
export PYTHONUSERBASE="$BUILD_DIR/.heroku/python"
INSTALLED_PYTHON="/app/.heroku/python/bin/python"
if [ "$FRESH_PYTHON" ] || [[ ! -f "$BUILD_DIR/.heroku/python/bin/pip" ]]; then

  puts-step "Installing pip"

  # Remove old installations.
  rm -fr "$BUILD_DIR/.heroku/python/lib/python*/site-packages/pip-*"
  rm -fr "$BUILD_DIR/.heroku/python/lib/python*/site-packages/setuptools-*"

  ls -la "$BUILD_DIR/.heroku/python"; echo
  ls -la "$BUILD_DIR/.heroku/python/bin"; echo
  ls -la "$BUILD_DIR/.heroku/python/lib"; echo
  echo; echo;
  which -a pip

  # Installed via symlinks to maintain python-path
  "$INSTALLED_PYTHON" "$ROOT_DIR/vendor/get-pip.py" pip=="$PIP_UPDATE" --user

  ls -la "/app/.heroku/python"; echo
  ls -la "/app/.heroku/python/bin"; echo
  ls -la "/app/.heroku/python/lib"; echo
  echo; echo;
  which -a pip
  printenv
  "$BUILD_DIR/.heroku/python/bin/pip" install -U pip
  "$BUILD_DIR/.heroku/python/bin/pip" install "$ROOT_DIR/vendor/setuptools-39.0.1-py2.py3-none-any.whl"

fi

set -e
hash -r
